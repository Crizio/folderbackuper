//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FolderBackup.CommunicationProtocol
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SerializedVersion", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class SerializedVersion : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] encodedVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] encodedVersion
        {
            get
            {
                return this.encodedVersionField;
            }
            set
            {
                this.encodedVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class ServiceErrorMessage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int typeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IBackupService")]
public interface IBackupService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/auth", ReplyAction="http://tempuri.org/IBackupService/authResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/authServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    bool auth(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/auth", ReplyAction="http://tempuri.org/IBackupService/authResponse")]
    System.Threading.Tasks.Task<bool> authAsync(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/getCurrentVersion", ReplyAction="http://tempuri.org/IBackupService/getCurrentVersionResponse")]
    FolderBackup.CommunicationProtocol.SerializedVersion getCurrentVersion();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/getCurrentVersion", ReplyAction="http://tempuri.org/IBackupService/getCurrentVersionResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion> getCurrentVersionAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/newTransaction", ReplyAction="http://tempuri.org/IBackupService/newTransactionResponse")]
    bool newTransaction(FolderBackup.CommunicationProtocol.SerializedVersion newVersion);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/newTransaction", ReplyAction="http://tempuri.org/IBackupService/newTransactionResponse")]
    System.Threading.Tasks.Task<bool> newTransactionAsync(FolderBackup.CommunicationProtocol.SerializedVersion newVersion);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/commit", ReplyAction="http://tempuri.org/IBackupService/commitResponse")]
    bool commit();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/commit", ReplyAction="http://tempuri.org/IBackupService/commitResponse")]
    System.Threading.Tasks.Task<bool> commitAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/rollback", ReplyAction="http://tempuri.org/IBackupService/rollbackResponse")]
    bool rollback();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/rollback", ReplyAction="http://tempuri.org/IBackupService/rollbackResponse")]
    System.Threading.Tasks.Task<bool> rollbackAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/uploadFile", ReplyAction="http://tempuri.org/IBackupService/uploadFileResponse")]
    string uploadFile(System.IO.Stream file);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/uploadFile", ReplyAction="http://tempuri.org/IBackupService/uploadFileResponse")]
    System.Threading.Tasks.Task<string> uploadFileAsync(System.IO.Stream file);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/getFilesToUpload", ReplyAction="http://tempuri.org/IBackupService/getFilesToUploadResponse")]
    byte[][] getFilesToUpload();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/getFilesToUpload", ReplyAction="http://tempuri.org/IBackupService/getFilesToUploadResponse")]
    System.Threading.Tasks.Task<byte[][]> getFilesToUploadAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IBackupServiceChannel : IBackupService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class BackupServiceClient : System.ServiceModel.ClientBase<IBackupService>, IBackupService
{
    
    public BackupServiceClient()
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public BackupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool auth(string username, string password)
    {
        return base.Channel.auth(username, password);
    }
    
    public System.Threading.Tasks.Task<bool> authAsync(string username, string password)
    {
        return base.Channel.authAsync(username, password);
    }
    
    public FolderBackup.CommunicationProtocol.SerializedVersion getCurrentVersion()
    {
        return base.Channel.getCurrentVersion();
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion> getCurrentVersionAsync()
    {
        return base.Channel.getCurrentVersionAsync();
    }
    
    public bool newTransaction(FolderBackup.CommunicationProtocol.SerializedVersion newVersion)
    {
        return base.Channel.newTransaction(newVersion);
    }
    
    public System.Threading.Tasks.Task<bool> newTransactionAsync(FolderBackup.CommunicationProtocol.SerializedVersion newVersion)
    {
        return base.Channel.newTransactionAsync(newVersion);
    }
    
    public bool commit()
    {
        return base.Channel.commit();
    }
    
    public System.Threading.Tasks.Task<bool> commitAsync()
    {
        return base.Channel.commitAsync();
    }
    
    public bool rollback()
    {
        return base.Channel.rollback();
    }
    
    public System.Threading.Tasks.Task<bool> rollbackAsync()
    {
        return base.Channel.rollbackAsync();
    }
    
    public string uploadFile(System.IO.Stream file)
    {
        return base.Channel.uploadFile(file);
    }
    
    public System.Threading.Tasks.Task<string> uploadFileAsync(System.IO.Stream file)
    {
        return base.Channel.uploadFileAsync(file);
    }
    
    public byte[][] getFilesToUpload()
    {
        return base.Channel.getFilesToUpload();
    }
    
    public System.Threading.Tasks.Task<byte[][]> getFilesToUploadAsync()
    {
        return base.Channel.getFilesToUploadAsync();
    }
}
